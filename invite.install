<?php

/**
 * @file
 * Installation file for invite module.
 */

/**
 * Implements hook_schema().
 */
function invite_schema() {
  $schema['invite'] = array(
    'description' => 'The base table for invites.',
    'fields' => array(
      'iid' => array(
        'description' => 'The primary identifier for a invite.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'reg_code' => array(
        'description' => 'Stores the issued registration code and acts as primary identifier for a invite.',
        'type' => 'varchar',
        'length' => 8,
        'not null' => TRUE,
        'default' => '',
      ),
      'email' => array(
        'description' => 'Stores the e-mail the invite has been addressed to.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'Stores the user id of the inviter.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'invitee' => array(
        'description' => 'Stores the user id of the invitee upon registration.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'Stores the creation time of the invite.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'expiry' => array(
        'description' => 'Stores the expiry time of the invite.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'joined' => array(
        'description' => 'Will be filled with the time the invite was accepted upon registration.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'canceled' => array(
        'description' => 'Stores whether the invite has been withdrawn.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'resent' => array(
        'description' => 'Stores how many times the invite has been resent.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'Stores auxiliary data.',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'reg_code' => array('reg_code'),
    ),
    'indexes' => array(
      'email' => array('email'),
      'uid' => array('uid'),
    ),
    'primary key' => array('iid'),
  );

  $schema['invite_notifications'] = array(
    'description' => 'Stores notifications of inviters.',
    'fields' => array(
      'uid' => array(
        'description' => 'Stores the user id to be notified (inviter).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'invitee' => array(
        'description' => 'Stores the user id of the invitee.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'uid_invitee' => array('uid', 'invitee'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function invite_uninstall() {
  // Delete variables
  $sql = "DELETE from {variable} WHERE name LIKE :varname";
  db_query($sql, array(':varname' => 'invite_target_role_%'));
  db_query($sql, array(':varname' => 'invite_maxnum_%'));
  db_query($sql, array(':varname' => 'invite_maxmultiple_%'));

  config_clear('invite.settings', 'invite_target_role_default');
  config_clear('invite.settings', 'invite_expiry');
  config_clear('invite.settings', 'invite_allow_join_delete');
  config_clear('invite.settings', 'invite_subject');
  config_clear('invite.settings', 'invite_use_users_email');
  config_clear('invite.settings', 'invite_use_users_email_replyto');
  config_clear('invite.settings', 'invite_manual_from');
  config_clear('invite.settings', 'invite_manual_reply_to');
  config_clear('invite.settings', 'invite_page_title');
  config_clear('invite.settings', 'invite_default_mail_template');
  config_clear('invite.settings', 'invite_help_text');

  // invite_stats module
  config_clear('invite.settings', 'invite_num_ranks');
}

/**
 * Implements hook_disable().
 */
function invite_disable() {
  if (invite_user_registration_by_invite_only()) {
    config_set('system.performance', 'user_register', 1);
    backdrop_set_message(t('User registration option reset to %no_approval.', array('%no_approval' => t('Visitors can create accounts and no administrator approval is required.'))));
  }
}

/**
 * Helper function to update tokens.
 */
function _invite_update_tokens($variables, $old, $new) {
  foreach ((array) $variables as $variable) {
    // TODO This variable was probably removed in Backdrop without replacement.
    if ($value = variable_get($variable, NULL)) {
      $value = str_replace($old, $new, $value);
      // TODO This variable was probably removed in Backdrop without replacement.
      variable_set($variable, $value);
    }
  }
}

/**
 * Helper function to add a permission to a role.
 */
function _invite_add_permission($rid, $permission) {
  if ($permission) {
    $current_perm = db_query("SELECT permission FROM {role_permission} WHERE rid = :rid", array(':rid' => $rid))->fetchField();
    if ($current_perm != '') {
      $current_perm .= ', ';
    }
    $current_perm .= $permission;
    db_update('role_permission')
      ->fields(array('permission' => $current_perm))
      ->condition('rid', $rid)
      ->execute();
  }
}

/**
 * Helper function to update a variable name using role name to role id.
 */
function _invite_update_role_name_to_id($variable) {
  $result = db_query("SELECT * FROM {role} ORDER BY name ASC");
  while ($role = db_fetch_object($result)) {
    // Look for both a translated (D6) and untranslated (D5) variables.
    // A translated one is newer and has therefore precendence.
    $translated_role = str_replace(' ', '_', t($role->name));
    // TODO This variable was probably removed in Backdrop without replacement.
    $value = variable_get($variable . '_' . $translated_role, NULL);
    if (is_null($value)) {
      $untranslated_role = str_replace(' ', '_', $role->name);
      // TODO This variable was probably removed in Backdrop without replacement.
      $value = variable_get($variable . '_' . $untranslated_role, NULL);
    }
    if (!is_null($value)) {
      // TODO This variable was probably removed in Backdrop without replacement.
      variable_set($variable . '_' . $role->rid, $value);
      // @TODO: Should be converted to db_delete()
      db_query("DELETE FROM {variable} WHERE name IN('%s', '%s')", $variable . '_' . $translated_role, $variable . '_' . $untranslated_role);
    }
  }
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_7() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_8() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_9() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_10() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_11() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_12() { }

/**
 * @{
 * Invite 2.x updates
 */

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_200() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_201() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_202() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_203() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_7200() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function invite_update_7201() { }

/**
 * Implements hook_update_last_removed().
 */
function invite_update_last_removed() {
  return 7201;
}

/**
 * Implements hook_update_N().
 */
function invite_update_1000() {
  $config = config('invite.settings');
  $config->set('invite_redirect_upon_create', update_variable_get('invite_redirect_upon_create', 'dynamic value in file /invite/includes/invite.admin.inc line 340'));
  $config->set('invite_default_expiry_time', update_variable_get('invite_default_expiry_time', '30'));
  $config->set('invite_registration_path', update_variable_get('invite_registration_path', 'user/register'));
  $config->set('invite_require_approval', update_variable_get('invite_require_approval', 'FALSE'));
  $config->set('invite_version_updated', update_variable_get('invite_version_updated', 'TRUE'));
  $config->set('invite_target_role_rid', update_variable_get('invite_target_role_rid', 'dynamic variable in file /invite/invite.module line 773'));
  $config->set('invite_target_role_default', update_variable_get('invite_target_role_default', 'DRUPAL_AUTHENTICATED_RID'));
  $config->set('invite_expiry', update_variable_get('invite_expiry', '30'));
  $config->set('invite_profile_inviter', update_variable_get('invite_profile_inviter', 'TRUE'));
  $config->set('invite_maxnum_rid', update_variable_get('invite_maxnum_rid', 'dynamic variable in file /invite/invite.module line 992'));
  $config->set('invite_subject', update_variable_get('invite_subject', 'dynamic value in file /invite/invite.module line 1464'));
  $config->set('invite_subject_editable', update_variable_get('invite_subject_editable', 'FALSE'));
  $config->set('invite_mail_template_editable', update_variable_get('invite_mail_template_editable', 'TRUE'));
  $config->set('invite_use_users_email', update_variable_get('invite_use_users_email', 'novalue'));
  $config->set('invite_use_users_email_replyto', update_variable_get('invite_use_users_email_replyto', 'novalue'));
  $config->set('invite_manual_from', update_variable_get('invite_manual_from', ''));
  $config->set('invite_manual_reply_to', update_variable_get('invite_manual_reply_to', ''));
  $config->set('invite_page_title', update_variable_get('invite_page_title', 'dynamic value in file /invite/invite.module line 295'));
  $config->set('invite_maxnum_role_no_space', update_variable_get('invite_maxnum_role_no_space', 'dynamic variable in file /invite/invite.install line 252'));
  $config->set('invite_maxmultiple_role_no_space', update_variable_get('invite_maxmultiple_role_no_space', 'dynamic variable in file /invite/invite.install line 258'));
  $config->set('invite_allow_join_delete', update_variable_get('invite_allow_join_delete', 'novalue'));
  $config->set('invite_default_mail_template', update_variable_get('invite_default_mail_template', 'dynamic value in file /invite/invite.module line 1585'));
  update_variable_del('invite_redirect_upon_create');
  update_variable_del('invite_default_expiry_time');
  update_variable_del('invite_registration_path');
  update_variable_del('invite_require_approval');
  update_variable_del('invite_version_updated');
  update_variable_del('invite_target_role_rid');
  update_variable_del('invite_target_role_default');
  update_variable_del('invite_expiry');
  update_variable_del('invite_profile_inviter');
  update_variable_del('invite_maxnum_rid');
  update_variable_del('invite_subject');
  update_variable_del('invite_subject_editable');
  update_variable_del('invite_mail_template_editable');
  update_variable_del('invite_use_users_email');
  update_variable_del('invite_use_users_email_replyto');
  update_variable_del('invite_manual_from');
  update_variable_del('invite_manual_reply_to');
  update_variable_del('invite_page_title');
  update_variable_del('invite_maxnum_role_no_space');
  update_variable_del('invite_maxmultiple_role_no_space');
  update_variable_del('invite_allow_join_delete');
  update_variable_del('invite_default_mail_template');
}

/**
 * Implements hook_install().
 */
function invite_install() {
  // Dynamically generated variable data was detected.
  // /invite/includes/invite.admin.inc line 340
  // /invite/invite.module line 773
  // /invite/invite.module line 992
  // /invite/invite.module line 1464
  // /invite/invite.module line 295
  // /invite/invite.install line 252
  // /invite/invite.install line 258
  // /invite/invite.module line 1585
}
